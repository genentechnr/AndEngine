TODOS:
	- Add static default shader for Line/Rectangle/Sprite/SpriteBatch/Text
		- Check which of these can be shared across classes, i.e. using a ShaderProgramCache.
		- Remove 'setDefaultShaderProgram' OR make it not generate a new one but return a static one.  
	- Test performance of colors as bytes.
		- See if it makes sense to overall store color as bytes.
	- Try to minimize usage Float.floatToIntRawBits by smartly. 
		- Keep in mind: I.e. more benefits in SpriteGroup as it writes the colors even if they didn't change. 
	- Find higher performance Matrix4f class?
	- Test if only unbinding a ShaderProgram if different one comes in improves performance.
	- Think about a way to update the Mesh of a Sprite more efficient.
		- Currently when updating the TextureCoordinates, the whole data array is sent to the buffer.
			- This could be optimized by not storing the data alternating (X0,Y0,U0,V0,X1,Y1,...) but in (X0,Y0,X1,Y1,...,U0,V0,U1,V1,...) 
	- Think about the default blendfunction (for sprites, but also for primitives).
		- For Sprites, keep premultiplyalpha in mind..
	- Eventually separate a TextureRegion from knowing what Texture it is on.
		- Makes it easier to switch textures during runtime.
		- Less disturbing when using multiple textures. 
		- Drawbacks?
	- All custom Exceptions extend from AndEngineException
	- Convert "IllegalArgumentException("Unexpected..." to "UnexpectedArgumentException extends AndEngineException
	- Replace: 
		- mEngine.getTextureManager() -> getTextureManager()
		- mEngine.getFontManager() -> getFontManager()
	- Remove POT texture restriction
	- Maybe introduce Color3/4 objects
		- Add Color3/4Pool
	- According to the Performance myths, pulling class attributes to local fields is not necessary anymore with the JIT.
		- As GLES2 is only available on JIT devices, this might be something to consider
	- I think I once wrote a commment to remove some legacy code when > 1.6. 
		- FIND IT!!!
	- TODO See if mediump precision and lowp precision make a difference. (cocos2d-gles2 seems to use lowp precision mostly).
	- Shadercache, as with the color in the VBO, shaders can be reused A LOT more easily !!!!!
	- Instead of directly updating the buffers in onUpdatePosition/onUpdateColor, they could be only marked as dirty and actually written when needed.

EXAMPLES:
	- Blur/Bloom Shader?
		- http://stackoverflow.com/questions/4712042/iphone-post-processing-with-a-single-fbo-with-opengl-es-2-0
	- Custom Text Mesh that shows how to color letters individually and make those colors change over time using a custom shader.