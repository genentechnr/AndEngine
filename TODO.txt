TODOS:
	- http://developer.apple.com/library/ios/#documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/TechniquesforWorkingwithVertexData/TechniquesforWorkingwithVertexData.html
	- Find higher performance Matrix4f class?
	- Test if only unbinding a ShaderProgram if different one comes in improves performance.
	- Think about a way to update the Mesh of a Sprite more efficient.
		- Currently when updating the TextureCoordinates, the whole data array is sent to the buffer.
			- This could be optimized by not storing the data alternating (X0,Y0,U0,V0,X1,Y1,...) but in (X0,Y0,X1,Y1,...,U0,V0,U1,V1,...)
	- Think about the default blendfunction (for sprites, but also for primitives).
		- For Sprites, keep premultiplyalpha in mind..
	- Eventually separate a TextureRegion from knowing what Texture it is on.
		- Makes it easier to switch textures during runtime.
		- Less disturbing when using multiple textures. 
		- Drawbacks?
	- All custom Exceptions extend from AndEngineException
	- Convert "IllegalArgumentException("Unexpected..." to "UnexpectedArgumentException extends AndEngineException
	- Remove POT texture restriction
	- According to the Performance myths, pulling class attributes to local fields is not necessary anymore with the JIT.
		- As GLES2 is only available on JIT devices, this might be something to consider
	- I think I once wrote a commment to remove some legacy code when > 1.6. 
		- FIND IT!!!
	- FIND MORE LEGACY CODE AND GET RID OF IT =) *YAY*
	- TODO See if mediump precision and lowp precision make a difference. (cocos2d-gles2 seems to use lowp precision mostly).
	- Shadercache, as with the color in the VBO, shaders can be reused A LOT more easily !!!!!

EXAMPLES:
	- Replace: 
		- mEngine.getTextureManager() -> getTextureManager()
		- mEngine.getFontManager() -> getFontManager()
	- Blur/Bloom Shader?
		- http://stackoverflow.com/questions/4712042/iphone-post-processing-with-a-single-fbo-with-opengl-es-2-0
	- Custom Text Mesh that shows how to color letters individually and make those colors change over time using a custom shader.
	
	
21:46:55.724: WARN/AndEngine(7595): Writing Texture to hardware...
	21:46:55.724: INFO/AndEngine(7595): Texture 6
	21:46:55.724: WARN/AndEngine(7595): Loading PVR data...
	21:46:55.764: DEBUG/dalvikvm(7595): GC_FOR_MALLOC freed 4571K, 82% free 3430K/18375K, external 2197K/2744K, paused 21ms
	21:46:55.764: INFO/dalvikvm-heap(7595): Grow heap (frag case) to 8.889MB for 1073844-byte allocation
	21:46:55.844: DEBUG/dalvikvm(7595): GC_CONCURRENT freed 520K, 79% free 3959K/18375K, external 2197K/2744K, paused 2ms+4ms
	21:46:55.864: INFO/dalvikvm-heap(7595): Grow heap (frag case) to 10.444MB for 2163192-byte allocation
	21:46:55.954: DEBUG/dalvikvm(7595): GC_CONCURRENT freed 1048K, 73% free 5022K/18375K, external 2197K/2744K, paused 2ms+3ms
	21:46:55.974: INFO/dalvikvm-heap(7595): Grow heap (frag case) to 13.560MB for 4341946-byte allocation
	21:46:56.074: DEBUG/dalvikvm(7595): GC_CONCURRENT freed 2112K, 62% free 7150K/18375K, external 2197K/2744K, paused 2ms+4ms
	21:46:56.094: INFO/dalvikvm-heap(7595): Grow heap (frag case) to 15.490MB for 4194372-byte allocation
	21:46:56.144: WARN/AndEngine(7595): done loading PVR data.
	21:46:56.164: WARN/AndEngine(7595): Allocating pixelData Buffer...
	21:46:56.194: DEBUG/dalvikvm(7595): GC_CONCURRENT freed 4240K, 62% free 6998K/18375K, external 2197K/2744K, paused 2ms+3ms
	21:46:56.214: INFO/dalvikvm-heap(7595): Grow heap (frag case) to 15.349MB for 4194320-byte allocation
	21:46:56.244: WARN/AndEngine(7595): done allocating pixelData Buffer.
	21:46:56.364: DEBUG/dalvikvm(7595): GC_EXPLICIT freed 4096K, 62% free 6998K/18375K, external 2197K/2744K, paused 31ms
21:46:56.364: WARN/AndEngine(7595): done writing Texture to hardware!

20:47:14.102: WARN/AndEngine(761): Writing Texture to hardware...
	20:47:14.102: WARN/AndEngine(761): Loading PVR data...
	20:47:14.102: INFO/AndEngine(761): Texture 6
	20:47:14.122: DEBUG/dalvikvm(761): GC_FOR_MALLOC freed 4104K, 80% free 2919K/13959K, external 2185K/2729K, paused 19ms
	20:47:14.122: INFO/dalvikvm-heap(761): Grow heap (frag case) to 11.354MB for 4194372-byte allocation
	20:47:14.322: INFO/dalvikvm-heap(761): Grow heap (frag case) to 15.354MB for 4194372-byte allocation
	20:47:14.372: WARN/AndEngine(761): done loading PVR data.
	20:47:14.382: WARN/AndEngine(761): Allocating pixelData Buffer...
	20:47:14.432: DEBUG/dalvikvm(761): GC_CONCURRENT freed 4096K, 50% free 7015K/13959K, external 2185K/2729K, paused 3ms+5ms
	20:47:14.462: INFO/dalvikvm-heap(761): Grow heap (frag case) to 15.353MB for 4194320-byte allocation
	20:47:14.492: WARN/AndEngine(761): done allocating pixelData Buffer.
	20:47:14.602: DEBUG/dalvikvm(761): GC_EXPLICIT freed 4096K, 50% free 7015K/13959K, external 2185K/2729K, paused 27ms
20:47:14.602: WARN/AndEngine(761): done writing Texture to hardware!


21:12:17.650: WARN/AndEngine(1452): Writing Texture to hardware...
	21:12:17.650: WARN/AndEngine(1452): Loading PVR data...
	21:12:17.660: INFO/AndEngine(1452): Texture 6
	21:12:17.670: DEBUG/dalvikvm(1452): GC_FOR_MALLOC freed 4104K, 80% free 2905K/13895K, external 2197K/2744K, paused 17ms
	21:12:17.680: INFO/dalvikvm-heap(1452): Grow heap (frag case) to 11.352MB for 4194372-byte allocation
	21:12:17.800: WARN/AndEngine(1452): done loading PVR data.
	21:12:17.800: WARN/AndEngine(1452): Allocating pixelData Buffer...
	21:12:17.830: INFO/dalvikvm-heap(1452): Grow heap (frag case) to 15.351MB for 4194320-byte allocation
	21:12:17.850: WARN/AndEngine(1452): done allocating pixelData Buffer.
	21:12:17.890: WARN/AndEngine(1452): Calling glTexImage2D...
	21:12:17.930: WARN/AndEngine(1452): done calling glTexImage2D.
	21:12:17.930: WARN/AndEngine(1452): System.gc
	21:12:17.970: DEBUG/dalvikvm(1452): GC_EXPLICIT freed 4096K, 50% free 7001K/13895K, external 2197K/2744K, paused 31ms
21:12:17.970: WARN/AndEngine(1452): done writing Texture to hardware!
